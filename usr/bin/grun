#!/bin/bash

# Flexible Gamescope Launcher with automatic resolution detection
# ==========================================

# Logging function
log_message() {
    if [[ $ENABLE_LOGGING -eq 1 ]]; then
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] $1" >> "$LOG_FILE"
    fi
    echo "$1"
}

# Setup logging
setup_logging() {
    local log_dir="${XDG_STATE_HOME:-$HOME/.local/state}/grun"
    mkdir -p "$log_dir"
    LOG_FILE="$log_dir/grun.log"

    # Keep 5 rotated logs of max 1MB each
    if [[ -f "$LOG_FILE" ]]; then
        local size=$(stat -f %z "$LOG_FILE" 2>/dev/null || stat -c %s "$LOG_FILE")
        if (( size > 1048576 )); then
            # Shift existing rotated logs
            for i in {4..1}; do
                [[ -f "${LOG_FILE}.$i" ]] && mv "${LOG_FILE}.$i" "${LOG_FILE}.$((i+1))"
            done
            mv "$LOG_FILE" "${LOG_FILE}.1"

            # Remove oldest log if it exists
            [[ -f "${LOG_FILE}.5" ]] && rm "${LOG_FILE}.5"

            # Clean up old format log file if it exists
            [[ -f "${LOG_FILE}.old" ]] && rm "${LOG_FILE}.old"
        fi
    fi

    # Add header with system info
    {
        echo "=== Grun session started at $(date '+%Y-%m-%d %H:%M:%S') ==="
        echo "Display: $(xrandr --current | grep primary)"
        echo "GPU: $(lspci | grep -i vga)"
        echo "Kernel: $(uname -r)"
        echo "===================="
    } > "$LOG_FILE"
}

print_help() {
    cat << EOF
Usage: grun [options] <game command>

Options:
  -l, --log             Enable logging to ~/.local/state/grun/grun.log
  -m, --mangohud        Enable MangoHud overlay (shows FPS, resolution, etc)
  -q, --quality=<preset>  Use quality preset:
                         high         = native resolution (e.g., 4K → select 4K in game)
                         balanced     = 75% of native (e.g., 4K → select 2880x1620)
                         perf         = 50% of native (e.g., 4K → select 1080p)
                         rpgmaker     = 640x480 with FSR (for rpg-maker games)

                         Note: When you run grun, it will show the resolution
                         you should select in the game's graphics settings.
                         Look for the '🎮 Render:' line in the output.
  -s, --scale=<factor>   Set custom render scale (0.25 to 1.0)
  -v, --vulkan-opt       Enable Vulkan/Proton optimizations (DXVK async + Wined3D)
  -g, --gamemoderun      Run the game under gamemoderun
      --gamescope-args=<args>  Pass custom arguments to gamescope
  -h, --help             Show this help message

=======================================

Examples:
  grun -q high %command%               # Run at native resolution
  grun --quality=balanced %command%    # Run at 75% resolution with FSR
  grun --scale=0.5 -g %command%        # Run at 50% resolution with GameMode
  grun -q rpgmaker %command%           # For 640x480 locked games with FSR

=======================================

Gamescope shortcuts:
    Shortcut	Function
    Super + F	Toggle fullscreen
    Super + N	Toggle nearest neighbor filtering
    Super + U	Toggle FSR upscaling
    Super + Y	Toggle NIS upscaling
    Super + I	Increase FSR sharpness by 1
    Super + O	Decrease FSR sharpness by 1
    Super + S	Take screenshot
    Super + G	Toggle keyboard grab

MangoHud shortcuts:
    Shortcut           Function
    Right Shift + F12  Toggle HUD visibility
    Left Shift + F1    Toggle FPS limit
    Left Shift + F2    Toggle logging

EOF
}

# Get display information using xrandr
get_display_info() {
    local display_info
    if command -v xrandr >/dev/null 2>&1; then
        # First try to get the primary display's current mode
        display_info=$(xrandr --current | grep -A1 'primary' | grep -oP '\d+x\d+.*\*')
        if [[ -n "$display_info" ]]; then
            local resolution refresh
            resolution=$(echo "$display_info" | grep -oP '^\d+x\d+')
            refresh=$(echo "$display_info" | grep -oP '\d+\.\d+(?=\*)')
            echo "$resolution $refresh"
            return 0
        fi
    fi
    # Fallback to common 1080p@60Hz if detection fails
    echo "1920x1080 60.0"
    return 1
}

# Default values
VULKAN_OPT=0
USE_GAMEMODE=0
QUALITY_PRESET=""
SCALE_FACTOR=""
CUSTOM_GAMESCOPE_ARGS=""
ENABLE_LOGGING=0
LOG_FILE=""

# Get display information
read -r NATIVE_RES NATIVE_REFRESH <<< "$(get_display_info)"
NATIVE_WIDTH=$(echo "$NATIVE_RES" | cut -dx -f1)
NATIVE_HEIGHT=$(echo "$NATIVE_RES" | cut -dx -f2)
NATIVE_REFRESH=$(printf "%.0f" "$NATIVE_REFRESH")

# Parse flags and collect game command
GAME_CMD=()
while [[ $# -gt 0 ]]; do
    case $1 in
        -q|--quality)
            QUALITY_PRESET="$2"
            shift 2
            ;;
        --quality=*)
            QUALITY_PRESET="${1#*=}"
            shift
            ;;
        -s|--scale)
            SCALE_FACTOR="$2"
            shift 2
            ;;
        --scale=*)
            SCALE_FACTOR="${1#*=}"
            shift
            ;;
        -v|--vulkan-opt)
            VULKAN_OPT=1
            shift
            ;;
        -g|--gamemoderun)
            USE_GAMEMODE=1
            shift
            ;;
        -m|--mangohud)
            USE_MANGOHUD=1
            shift
            ;;
        -r|--rpg-maker)
            USE_RPG_MAKER=1
            shift
            ;;
        --gamescope-args=*)
            CUSTOM_GAMESCOPE_ARGS="${1#*=}"
            shift
            ;;
        -l|--log)
            ENABLE_LOGGING=1
            shift
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        --*)
            log_message "Unknown option: $1"
            print_help
            exit 1
            ;;
        -*)
            log_message "Unknown short option: $1"
            print_help
            exit 1
            ;;
        *)
            GAME_CMD=("$@")
            break
            ;;
    esac
done

# Prepare environment variables prefix (no export)
ENV_VARS="__NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia"
if [[ $VULKAN_OPT -eq 1 ]]; then
    ENV_VARS="$ENV_VARS DXVK_ASYNC=1 PROTON_USE_WINED3D=1"
fi

# Ensure game command is provided
if [[ ${#GAME_CMD[@]} -eq 0 ]]; then
    log_message "Error: No game command provided."
    print_help
    exit 1
fi

# Build the gamescope command
GAMESCOPE_CMD=(gamescope -f --backend sdl --adaptive-sync --hdr-enabled)

# Calculate resolution based on quality preset or scale factor
if [[ -n "$QUALITY_PRESET" ]]; then
    case $QUALITY_PRESET in
        high)
            RENDER_WIDTH=$NATIVE_WIDTH
            RENDER_HEIGHT=$NATIVE_HEIGHT
            ;;
        balanced)
            RENDER_WIDTH=$(printf "%.0f" "$(echo "$NATIVE_WIDTH * 0.75" | bc -l)")
            RENDER_HEIGHT=$(printf "%.0f" "$(echo "$NATIVE_HEIGHT * 0.75" | bc -l)")
            GAMESCOPE_CMD=(ENABLE_GAMESCOPE_WSI=0 "${GAMESCOPE_CMD[@]}" -F fsr)
            ;;
        perf|performance)
            RENDER_WIDTH=$(printf "%.0f" "$(echo "$NATIVE_WIDTH * 0.5" | bc -l)")
            RENDER_HEIGHT=$(printf "%.0f" "$(echo "$NATIVE_HEIGHT * 0.5" | bc -l)")
            GAMESCOPE_CMD=(ENABLE_GAMESCOPE_WSI=0 "${GAMESCOPE_CMD[@]}" -F fsr)
            ;;
        pixel)
            RENDER_WIDTH=640
            RENDER_HEIGHT=480
            GAMESCOPE_CMD=(ENABLE_GAMESCOPE_WSI=0 "${GAMESCOPE_CMD[@]}" -F fsr)
            ;;
        *)
            echo "Invalid quality preset: $QUALITY_PRESET"
            echo "Valid presets: high, balanced, performance, pixel"
            exit 1
            ;;
    esac
elif [[ -n "$SCALE_FACTOR" ]]; then
    # Validate scale factor
    if (( $(echo "$SCALE_FACTOR < 0.25" | bc -l) )) || (( $(echo "$SCALE_FACTOR > 1.0" | bc -l) )); then
        echo "Scale factor must be between 0.25 and 1.0"
        exit 1
    fi
    RENDER_WIDTH=$(printf "%.0f" "($NATIVE_WIDTH * $SCALE_FACTOR)")
    RENDER_HEIGHT=$(printf "%.0f" "($NATIVE_HEIGHT * $SCALE_FACTOR)")
    # Enable FSR if not running at native resolution
    if [[ "$SCALE_FACTOR" != "1.0" ]]; then
        GAMESCOPE_CMD+=(-F fsr)
    fi
fi

# Always set output resolution to native
GAMESCOPE_CMD+=(-W "$NATIVE_WIDTH" -H "$NATIVE_HEIGHT" -r "$NATIVE_REFRESH")

# Set render resolution if different from native
if [[ -n "$RENDER_WIDTH" && -n "$RENDER_HEIGHT" ]] && \
   [[ "$RENDER_WIDTH" != "$NATIVE_WIDTH" || "$RENDER_HEIGHT" != "$NATIVE_HEIGHT" ]]; then
    GAMESCOPE_CMD+=(-w "$RENDER_WIDTH" -h "$RENDER_HEIGHT")
fi


# Add custom gamescope args if provided
if [[ -n "$CUSTOM_GAMESCOPE_ARGS" ]]; then
    read -ra ARGS_ARRAY <<< "$CUSTOM_GAMESCOPE_ARGS"
    GAMESCOPE_CMD+=("${ARGS_ARRAY[@]}")
fi

# Setup MangoHud config for resolution display
if [[ $USE_MANGOHUD -eq 1 ]]; then
    # Ensure MangoHud config directory exists
    mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/MangoHud"

    # Create or update MangoHud config
    MANGOHUD_CONFIG_PATH="${XDG_CONFIG_HOME:-$HOME/.config}/MangoHud/MangoHud.conf"
    cat > "$MANGOHUD_CONFIG_PATH" << EOF
fps
fps_limit=0
frame_timing=0
cpu_stats
gpu_stats
ram
vram
resolution
vulkan_driver
refresh_rate
gpu_name
wine
gamemode
custom_text=Render: ${RENDER_WIDTH}x${RENDER_HEIGHT}
position=top-left
background_alpha=0.5
font_size=20
toggle_hud=Shift_R+F12
toggle_fps_limit=Shift_L+F1
toggle_logging=Shift_L+F2
output_file=/dev/null
EOF

    # Set required environment variables for config loading
    ENV_VARS="$ENV_VARS MANGOHUD_CONFIGFILE=$MANGOHUD_CONFIG_PATH"
fi

# Add MangoHud if enabled
if [[ $USE_MANGOHUD -eq 1 ]]; then
    GAMESCOPE_CMD+=(--mangoapp)
fi

# Add the separator
GAMESCOPE_CMD+=(--)

# Build final command with GameMode
if [[ $USE_GAMEMODE -eq 1 ]]; then
    FINAL_CMD=("${GAMESCOPE_CMD[@]}" gamemoderun "${GAME_CMD[@]}")
else
    FINAL_CMD=("${GAMESCOPE_CMD[@]}" "${GAME_CMD[@]}")
fi

# Initialize logging if enabled
if [[ $ENABLE_LOGGING -eq 1 ]]; then
    setup_logging
fi

# Print some useful information
log_message "🖥️ Output: ${NATIVE_WIDTH}x${NATIVE_HEIGHT} @ ${NATIVE_REFRESH}Hz"
if [[ -n "$RENDER_WIDTH" && -n "$RENDER_HEIGHT" ]]; then
    log_message "🎮 Render: ${RENDER_WIDTH}x${RENDER_HEIGHT}"
    if [[ "$RENDER_WIDTH" != "$NATIVE_WIDTH" || "$RENDER_HEIGHT" != "$NATIVE_HEIGHT" ]]; then
        log_message "🔄 FSR upscaling to output resolution"
    fi
fi
log_message "⚙️ Executing: env $ENV_VARS ${FINAL_CMD[*]}"

# Execute the command with environment variables
env $ENV_VARS "${FINAL_CMD[@]}"
